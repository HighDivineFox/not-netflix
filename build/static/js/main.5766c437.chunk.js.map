{"version":3,"sources":["Components/Header.js","Components/User.js","Components/UserList.js","Components/SignIn.js","Components/MediaItem.js","Components/ContentRow.js","Components/Showcase.js","Components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","this","props","isLoggedIn","react_default","a","createElement","className","src","userData","picture","thumbnail","alt","Component","User","handleClick","_this","selectUser","data","onMouseDown","large","getName","index","name","first","charAt","toUpperCase","slice","last","UserList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","users","populateUsers","bind","assertThisInitialized","_this2","map","item","Components_User","key","_this3","fetchURL","Math","ceil","random","newUserArray","fetch","then","result","status","console","log","json","i","results","length","push","setState","SignIn","Components_UserList","MediaItem","imageLoaded","url","getRandomImageUrl","showF","title","onLoad","handleImageLoaded","onError","addDefaultSrc","style","display","getTitle","ev","target","response","statusText","text","split","join","ContentRow","items","Components_MediaItem","Showcase","showcaseImageUrl","getShowcaseImage","showCaseTitle","showCaseSummary","loadShowcaseItem","id","dangerouslySetInnerHTML","__html","type","value","handleImageError","document","getElementById","window","innerWidth","randomIndex","mode","sum","summary","catch","err","Content","Components_Showcase","Components_ContentRow","App","userObj","selectProfile","Components_Header","Components_SignIn","Components_Content","React","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gOAmCeA,0LA9BP,OAAGC,KAAKC,MAAMC,WAENC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,iBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKC,MAAMO,SAASC,QAAQC,UAAWC,IAAI,kBAG7DR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,QACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,YACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,kBACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,aAMRH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,mBAzBKM,cCqBNC,6MALXC,YAAc,WACVC,EAAKd,MAAMe,WAAWD,EAAKd,MAAMgB,+EAfjC,OACId,EAAAC,EAAAC,cAAA,OAAKa,YAAalB,KAAKc,aACnBX,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKC,MAAMgB,KAAKR,QAAQU,MAAOb,UAAU,aAAaK,IAAI,gBAAgBR,EAAAC,EAAAC,cAAA,WACnFL,KAAKoB,QAAQpB,KAAKC,MAAMgB,uCAK7BI,GAGJ,OAFgBrB,KAAKC,MAAMgB,KAAKK,KAAKC,MAAMC,OAAO,GAAGC,cAAgBzB,KAAKC,MAAMgB,KAAKK,KAAKC,MAAMG,MAAM,GAEnF,KADJ1B,KAAKC,MAAMgB,KAAKK,KAAKK,KAAKH,OAAO,GAAGC,cAAgBzB,KAAKC,MAAMgB,KAAKK,KAAKK,KAAKD,MAAM,WAZxFd,aC2DJgB,cAzDX,SAAAA,EAAY3B,GAAO,IAAAc,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAA4B,IACfb,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAjC,KAAMC,KACDiC,MAAQ,CACTC,MAAO,IAGXpB,EAAKqB,cAAgBrB,EAAKqB,cAAcC,KAAnBR,OAAAS,EAAA,EAAAT,CAAAd,IANNA,wEASV,IAAAwB,EAAAvC,KACL,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACVN,KAAKkC,MAAMC,MAAMK,IAAI,SAACC,EAAMpB,GAAP,OAClBlB,EAAAC,EAAAC,cAACqC,EAAD,CAAMC,IAAKtB,EAAOJ,KAAMwB,EAAMzB,WAAYuB,EAAKtC,MAAMe,4DAOjEhB,KAAKoC,wDAGM,IAAAQ,EAAA5C,KAEP6C,EAAW,sCAAwCC,KAAKC,KAAqB,EAAhBD,KAAKE,UAClEC,EAAe,GAEnBC,MAAML,GACDM,KAAM,SAAAC,GAGkB,MAAlBA,EAAOC,QACNC,QAAQC,IAAI,eAGhBH,EAAOI,OACFL,KAAK,SAAClC,GAGH,IAAI,IAAIwC,EAAI,EAAGA,EAAIxC,EAAKyC,QAAQC,OAAQF,IACpCR,EAAaW,KAAK3C,EAAKyC,QAAQD,IAMnCb,EAAKiB,SAAS,CACV1B,MAAOc,eAjDZrC,aCoBRkD,mLAjBP,OAAG9D,KAAKC,MAAMC,WACH,KAGHC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCAAf,mBAGAH,EAAAC,EAAAC,cAAC0D,EAAD,CAAU/C,WAAYhB,KAAKC,MAAMe,aACjCb,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+EAAf,2BAZCM,aCkFNoD,cAlFX,SAAAA,EAAY/D,GAAO,IAAAc,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAAgE,IACfjD,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAmC,GAAA/B,KAAAjC,KAAMC,KACDiC,MAAQ,CACT+B,aAAa,EACbC,IAAKnD,EAAKoD,oBACVC,MAAOtB,KAAKE,SACZqB,MAAO,IANItD,wEAaf,OAAIf,KAAKkC,MAAM+B,YAQZjE,KAAKkC,MAAMkC,OAAS,GAEfjE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBN,KAAKkC,MAAMmC,OAC9ClE,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKkC,MAAMgC,IAAK5D,UAAU,iBAAiBgE,OAAQtE,KAAKuE,kBAAkBlC,KAAKrC,MAAOwE,QAASxE,KAAKyE,cAAe9D,IAAI,qBAKrIR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,KACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAAoBN,KAAKkC,MAAMmC,OAC9ClE,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKkC,MAAMgC,IAAK5D,UAAU,iBAAiBgE,OAAQtE,KAAKuE,kBAAkBlC,KAAKrC,MAAOwE,QAASxE,KAAKyE,cAAe9D,IAAI,qBAlBrIR,EAAAC,EAAAC,cAAA,OAAKqE,MAAO,CAACC,QAAS,SAClBxE,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKkC,MAAMgC,IAAK5D,UAAU,iBAAiBgE,OAAQtE,KAAKuE,kBAAkBlC,KAAKrC,MAAOwE,QAASxE,KAAKyE,cAAe9D,IAAI,iEAwB7IX,KAAK4E,iDAGKC,GACVA,EAAGC,OAAOvE,IAAM,4EAIhBP,KAAK6D,SAAS,CACVI,aAAa,gDAMjB,MAAO,4BADOnB,KAAKC,KAAqB,IAAhBD,KAAKE,UACkB,8CAGzC,IAAAT,EAAAvC,KAENkD,MAAM,oDACDC,KAAK,SAAC4B,GAEa,MAAbA,IACCzB,QAAQC,IAAI,aACZD,QAAQC,IAAIwB,EAASC,aAGzBD,EAASvB,OACJL,KAAK,SAAClC,GACH,IAAIgE,EAAOhE,EAAK,GAEhBgE,EAAOA,EAAKC,MAAM,KAAKxD,MAAM,EAAG,GAAGyD,KAAK,KAExC5C,EAAKsB,SAAS,CACVQ,MAAOY,eA5EXrE,aCwBTwE,cAtBX,SAAAA,EAAYnF,GAAO,IAAAc,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAAoF,IACfrE,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAuD,GAAAnD,KAAAjC,KAAMC,KACDiC,MAAQ,CACTmD,MAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAHftE,wEASf,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACXH,EAAAC,EAAAC,cAAA,UAAKL,KAAKC,MAAMoE,OAChBlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACVN,KAAKkC,MAAMmD,MAAM7C,IAAI,SAACnB,GAAD,OAClBlB,EAAAC,EAAAC,cAACiF,EAAD,CAAW3C,IAAKtB,eAffT,aCmFV2E,cAnFX,SAAAA,EAAYtF,GAAO,IAAAc,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAAuF,IACfxE,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAA0D,GAAAtD,KAAAjC,KAAMC,KACDiC,MAAQ,CACTsD,iBAAkBzE,EAAK0E,mBACvBC,cAAe,GACfC,gBAAiB,KAGrB5E,EAAK6E,mBARU7E,wEAYf,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKwF,GAAG,iBACR1F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBN,KAAKkC,MAAMwD,eACvCvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBwF,wBAAyB,CAACC,OAAO/F,KAAKkC,MAAMyD,mBAC7ExF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAS0F,KAAK,SAASC,MAAM,SAC9C9F,EAAAC,EAAAC,cAAA,SAAOC,UAAU,SAAS0F,KAAK,SAASC,MAAM,eAI1D9F,EAAAC,EAAAC,cAAA,OAAKE,IAAKP,KAAKkC,MAAMsD,iBAAkBlF,UAAU,eAAeK,IAAI,wBAAwB2D,OAAQtE,KAAKuE,kBAAkBlC,KAAKrC,MAAOwE,QAASxE,KAAKkG,iBAAiB7D,KAAKrC,sDAOvLmG,SAASC,eAAe,iBAAiB1B,MAAMC,QAAU,mDAIzDwB,SAASC,eAAe,iBAAiB1B,MAAMC,QAAU,8CAIzDrB,QAAQC,IAAI,8BAEZvD,KAAK6D,SAAS,CACV2B,iBAAkB,yBAA2Ba,OAAOC,WAAa,oDAKrE,MAAO,yBAA2BD,OAAOC,WAAa,kDAGxC,IAAA/D,EAAAvC,KACVuG,EAAczD,KAAKC,KAAqB,IAAhBD,KAAKE,UAGjCE,MAFU,gCAAkCqD,EAEjC,CAACC,KAAM,SACbrD,KAAK,SAAC4B,GAEoB,MAApBA,EAAS1B,SACRC,QAAQC,IAAI,aACZD,QAAQC,IAAIwB,EAASC,aAGzBD,EAASvB,OACJL,KAAK,SAAClC,GAGH,IAAIwF,EAAMxF,EAAKyF,QAEfD,EAAMA,EAAIvB,MAAM,IAAK,GAAK,IAE1B3C,EAAKsB,SAAS,CACV6B,cAAezE,EAAKK,KACpBqE,gBAAiBc,QAG9BE,MAAM,SAACC,GACNtD,QAAQC,IAAI,mCACZD,QAAQC,IAAIqD,YA/ELhG,aCgCRiG,cA5BX,SAAAA,EAAY5G,GAAO,IAAAc,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAA6G,IACf9F,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAgF,GAAA5E,KAAAjC,KAAMC,KACDiC,MAAQ,CACTsD,iBAAkBzE,EAAK0E,oBAHZ1E,wEAQf,OAAIf,KAAKC,MAAMC,WAIPC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyG,EAAD,MAEA3G,EAAAC,EAAAC,cAAC0G,EAAD,CAAY1C,MAAM,YAClBlE,EAAAC,EAAAC,cAAC0G,EAAD,CAAY1C,MAAM,WAClBlE,EAAAC,EAAAC,cAAC0G,EAAD,CAAY1C,MAAM,YARnB,gDAeX,MAAO,yBAA2BgC,OAAOC,WAAa,cA1BxC1F,aCiCPoG,cA9Bb,SAAAA,IAAc,IAAAjG,EAAA,OAAAc,OAAAC,EAAA,EAAAD,CAAA7B,KAAAgH,IACZjG,EAAAc,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAmF,GAAA/E,KAAAjC,QACKkC,MAAQ,CACXhC,YAAY,EACZ+G,QAAS,MAGXlG,EAAKmG,cAAgBnG,EAAKmG,cAAc7E,KAAnBR,OAAAS,EAAA,EAAAT,CAAAd,IAPTA,wEAWZ,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC8G,EAAD,CAAQjH,WAAYF,KAAKkC,MAAMhC,WAAYM,SAAUR,KAAKkC,MAAM+E,UAChE9G,EAAAC,EAAAC,cAAC+G,EAAD,CAAQlH,WAAYF,KAAKkC,MAAMhC,WAAYc,WAAYhB,KAAKkH,gBAC5D/G,EAAAC,EAAAC,cAACgH,EAAD,CAASnH,WAAYF,KAAKkC,MAAMhC,WAAYM,SAAUR,KAAKkC,MAAM+E,iDAKzDzG,GACZR,KAAK6D,SACH,CACE3D,YAAW,EACX+G,QAASzG,WAzBC8G,IAAM1G,WCMJ2G,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzH,EAAAC,EAAAC,cAACwH,EAAD,MAAS1B,SAASC,eAAe,SD2H3C,kBAAmB0B,WACrBA,UAAUC,cAAcC,MAAM7E,KAAK,SAAA8E,GACjCA,EAAaC","file":"static/js/main.5766c437.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Header extends Component {\r\n\r\n    render() {\r\n        if(this.props.isLoggedIn){\r\n            return (\r\n                <div>\r\n                    <div className=\"navbar right\">\r\n                        <div className=\"navbar-item\">Search</div>\r\n                        <div className=\"navbar-item\">Notifications</div>\r\n                        <div className=\"navbar-item\">\r\n                            <img src={this.props.userData.picture.thumbnail} alt=\"User Avatar\" />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"navbar\">\r\n                        <div className=\"logo-small navbar-item\" >Fox-Flix</div>\r\n                        <div className=\"navbar-item\">Home</div>\r\n                        <div className=\"navbar-item\">TV Shows</div>\r\n                        <div className=\"navbar-item\">Movies</div>\r\n                        <div className=\"navbar-item\">Recently added</div>\r\n                        <div className=\"navbar-item\">My List</div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className=\"logo-large\" >\r\n                    Fox-Flix\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\n\r\nclass User extends Component {\r\n    render() {\r\n        return (\r\n            <div onMouseDown={this.handleClick}>\r\n                <img src={this.props.data.picture.large} className=\"userAvatar\" alt=\"user avatar\" /><br />\r\n                {this.getName(this.props.data)}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getName(index){\r\n        let firstName = this.props.data.name.first.charAt(0).toUpperCase() + this.props.data.name.first.slice(1)\r\n        let lastName = this.props.data.name.last.charAt(0).toUpperCase() + this.props.data.name.last.slice(1)\r\n        return firstName + \" \" + lastName\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.props.selectUser(this.props.data)\r\n    }\r\n}\r\n\r\nexport default User;","import React, { Component } from 'react';\r\nimport User from './User'\r\n\r\nclass UserList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: []\r\n        }\r\n\r\n        this.populateUsers = this.populateUsers.bind(this)\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"flexRow flexSpaced fitText linkStyles\" >\r\n                {this.state.users.map((item, index) => (\r\n                    <User key={index} data={item} selectUser={this.props.selectUser}/>\r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.populateUsers()\r\n    }\r\n\r\n    populateUsers(){\r\n\r\n        let fetchURL = \"https://randomuser.me/api/?results=\" + Math.ceil(Math.random() * 5)\r\n        let newUserArray = []\r\n\r\n        fetch(fetchURL)\r\n            .then((result => {\r\n\r\n                //console.log(result);\r\n                if(result.status !== 200){\r\n                    console.log(\"API problem\");\r\n                }\r\n\r\n                result.json()\r\n                    .then((data) => {\r\n                        //console.log(data);\r\n\r\n                        for(var i = 0; i < data.results.length; i++){\r\n                            newUserArray.push(data.results[i])\r\n                        }\r\n                       \r\n                        //console.log(data.results[0]);\r\n                        \r\n\r\n                        this.setState({\r\n                            users: newUserArray\r\n                        })\r\n                    })\r\n            }))\r\n\r\n        \r\n    }\r\n}\r\n\r\nexport default UserList;","import React, { Component } from 'react'\r\nimport UserList from './UserList'\r\n\r\nclass SignIn extends Component {\r\n    \r\n    render() {\r\n        if(this.props.isLoggedIn){\r\n            return null\r\n        }else{\r\n            return (\r\n                <div className=\"absCenter flexCol wrapped textCentered\">\r\n                    <div className=\"extraMarginBot contentWidth largeText\">\r\n                        Who's Watching?\r\n                    </div>\r\n                    <UserList selectUser={this.props.selectUser}/>\r\n                    <div className=\"horiCentered extraMarginTop border50 padded contentWidth mediumText pointer\">\r\n                        MANAGE PROFILES\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default SignIn;","import React, { Component } from 'react';\r\n\r\nclass MediaItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageLoaded: false,\r\n            url: this.getRandomImageUrl(),\r\n            showF: Math.random(),\r\n            title: \"\"\r\n        }\r\n    }\r\n    \r\n    render() {\r\n\r\n        // This solution for lazy loading the image works but I don't like it.\r\n        if(!this.state.imageLoaded){\r\n            return(\r\n                <div style={{display: 'none'}}>\r\n                    <img src={this.state.url} className=\"media-item-img\" onLoad={this.handleImageLoaded.bind(this)} onError={this.addDefaultSrc} alt=\"Media Thumbnail\" />\r\n                </div>\r\n            )\r\n        }\r\n\r\n        if(this.state.showF >= 0.5){\r\n            return (\r\n                <div className=\"rel media-item\">\r\n                    <div className=\"media-item-title\">{this.state.title}</div>\r\n                    <img src={this.state.url} className=\"media-item-img\" onLoad={this.handleImageLoaded.bind(this)} onError={this.addDefaultSrc} alt=\"Media Thumbnail\" />\r\n                </div>\r\n            )\r\n        }else{\r\n            return (\r\n                <div className=\"rel media-item\">\r\n                    <div className=\"media-logo\">F</div>\r\n                    <div className=\"media-item-title\">{this.state.title}</div>\r\n                    <img src={this.state.url} className=\"media-item-img\" onLoad={this.handleImageLoaded.bind(this)} onError={this.addDefaultSrc} alt=\"Media Thumbnail\" />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getTitle()\r\n    }\r\n\r\n    addDefaultSrc(ev){\r\n        ev.target.src = \"https://picsum.photos/350/200\"\r\n    }\r\n\r\n    handleImageLoaded(){\r\n        this.setState({\r\n            imageLoaded: true\r\n        })\r\n    }\r\n\r\n    getRandomImageUrl(){\r\n        let imageID = Math.ceil(Math.random() * 1000)\r\n        return \"https://picsum.photos/id/\" + imageID + \"/350/200\"\r\n    }\r\n\r\n    getTitle(){\r\n\r\n        fetch('https://baconipsum.com/api/?type=meat-and-filler')\r\n            .then((response) => {\r\n\r\n                if(response !== 200){\r\n                    console.log('API Error')\r\n                    console.log(response.statusText)   \r\n                }\r\n\r\n                response.json()\r\n                    .then((data) => {\r\n                        let text = data[0]\r\n\r\n                        text = text.split(' ').slice(0, 2).join(' ');\r\n\r\n                        this.setState({\r\n                            title: text\r\n                        })\r\n                    })\r\n            })\r\n    }\r\n}\r\n\r\nexport default MediaItem;","import React, { Component } from 'react';\r\nimport MediaItem from './MediaItem'\r\n\r\nclass ContentRow extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: [0, 1, 2, 3, 4, 5, 6]\r\n        }\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"content-row\">\r\n                <h1>{this.props.title}</h1>\r\n                <div className=\"flexRow non-wrapped\">\r\n                    {this.state.items.map((index) => (\r\n                        <MediaItem key={index}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ContentRow;","import React, { Component } from 'react';\r\n\r\nclass Showcase extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showcaseImageUrl: this.getShowcaseImage(),\r\n            showCaseTitle: \"\",\r\n            showCaseSummary: \" \"\r\n        }\r\n\r\n        this.loadShowcaseItem()\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"showcaseWrapper\">\r\n                <div id=\"showcaseImage\">\r\n                <div className=\"showcaseInformationWrapper\">\r\n                    <div className=\"showcaseTitle\">{this.state.showCaseTitle}</div>\r\n                        <div className=\"showcaseSummary\" dangerouslySetInnerHTML={{__html:this.state.showCaseSummary}}></div>\r\n                        <div>\r\n                            <div>\r\n                                <input className=\"button\" type=\"button\" value=\"Play\" />\r\n                                <input className=\"button\" type=\"button\" value=\"My List\" />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <img src={this.state.showcaseImageUrl} className=\"showcase-img\" alt=\"Large media thumbnail\" onLoad={this.handleImageLoaded.bind(this)} onError={this.handleImageError.bind(this)} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    componentDidMount(){\r\n        document.getElementById(\"showcaseImage\").style.display = \"none\"\r\n    }\r\n\r\n    handleImageLoaded(){\r\n        document.getElementById(\"showcaseImage\").style.display = \"\"\r\n    }\r\n\r\n    handleImageError(){\r\n        console.log('Showcase Image didn\\'t load');\r\n        \r\n        this.setState({\r\n            showcaseImageUrl: \"https://picsum.photos/\" + window.innerWidth + \"/650\"\r\n        })\r\n    }\r\n\r\n    getShowcaseImage(){\r\n        return \"https://picsum.photos/\" + window.innerWidth + \"/650\"\r\n    }\r\n\r\n    loadShowcaseItem(){\r\n        let randomIndex = Math.ceil(Math.random() * 10000)\r\n        let url = \"https://api.tvmaze.com/shows/\" + randomIndex\r\n\r\n        fetch(url, {mode: 'cors'})\r\n            .then((response) => {\r\n\r\n                if(response.status !== 200){\r\n                    console.log('API Error')\r\n                    console.log(response.statusText)                    \r\n                }\r\n\r\n                response.json()\r\n                    .then((data) => {\r\n                        //console.log(data);\r\n\r\n                        let sum = data.summary\r\n\r\n                        sum = sum.split(\".\", 1) + \".\"\r\n                        \r\n                        this.setState({\r\n                            showCaseTitle: data.name,\r\n                            showCaseSummary: sum\r\n                        })\r\n                    })\r\n            }).catch((err) => {\r\n                console.log(\"API Error: Something went wrong\")\r\n                console.log(err)\r\n            })\r\n    }\r\n}\r\n\r\nexport default Showcase;","import React, { Component } from 'react'\r\nimport ContentRow from './ContentRow'\r\nimport Showcase from './Showcase';\r\n\r\nclass Content extends Component {\r\n    // MAKE SHOWCASE ITS OWN COMPONENT\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            showcaseImageUrl: this.getShowcaseImage()\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        if(!this.props.isLoggedIn){\r\n            return null\r\n        }else{\r\n            return (\r\n                <div>\r\n                    <Showcase />\r\n                    \r\n                    <ContentRow title=\"Popular\"/>\r\n                    <ContentRow title=\"Action\"/>\r\n                    <ContentRow title=\"Comedy\"/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    getShowcaseImage(){\r\n        return \"https://picsum.photos/\" + window.innerWidth + \"/650\"\r\n    }\r\n}\r\n\r\nexport default Content;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header'\nimport SignIn from './Components/SignIn'\nimport Content from './Components/Content'\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      isLoggedIn: false,\n      userObj: null\n    }\n\n    this.selectProfile = this.selectProfile.bind(this)\n  }  \n\n  render(){\n    return (\n      <div className=\"App wrapper\">\n        <Header isLoggedIn={this.state.isLoggedIn} userData={this.state.userObj}/>\n        <SignIn isLoggedIn={this.state.isLoggedIn} selectUser={this.selectProfile}/>\n        <Content isLoggedIn={this.state.isLoggedIn} userData={this.state.userObj}/>\n      </div>\n    );\n  }\n\n  selectProfile(userData){\n    this.setState(\n      {\n        isLoggedIn:true,\n        userObj: userData\n      }\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}